{"version":3,"sources":["hooks/useLocaleStorage.ts","components/Loader/Loader.tsx","components/PostComponent/PostComponent.tsx","components/PostList/PostsList.tsx","components/Username/Username.tsx","helper/helper.ts","components/Posts/Posts.tsx","api/api.ts","App.tsx","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","data","localStorage","getItem","JSON","parse","value","setValue","currentValue","setItem","stringify","Loader","className","PostComponent","post","onClick","user","body","postId","username","firstLetter","split","map","el","slice","join","type","PostsList","posts","id","Username","onChange","htmlFor","placeholder","e","disabled","idGenarate","crypto","randomUUID","replace","Posts","setPosts","text","setText","isLoading","setIsLoading","error","setError","errorMessage","setErrorMessage","setUserName","appliedUsername","setAppliedUsername","addPost","prevState","useEffect","setTimeout","fetch","then","res","json","comments","finally","postID","prevstate","filter","name","cols","rows","target","onKeyDown","preventDefault","onKeyPress","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8e52657.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useLocalStorage = (key: string, initialValue: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const data = localStorage.getItem(key);\n\n      return data ? JSON.parse(data) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (currentValue: string) => {\n    setValue(currentValue);\n    localStorage.setItem(key, JSON.stringify(currentValue));\n  };\n\n  return [value, save];\n};\n","import React, { FC } from 'react';\n\nimport './loader.scss';\n\nexport const Loader: FC = () => (\n  <div className=\"lds-roller\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n);\n","import React, { FC } from 'react';\nimport { Post } from '../../types/Post';\n\nimport './postComponent.scss';\n\ntype Props = {\n  post: Post;\n  onClick: (postID: number) => void;\n};\n\nexport const PostComponent: FC<Props> = ({ post, onClick }) => {\n  const { user, body, postId } = post;\n  const { username } = user;\n\n  const firstLetter = username.split(' ').map(el => el.slice(0, 1)).join('');\n\n  return (\n    <div className=\"post\">\n      <div className=\"post__username--firs-letter\">{firstLetter}</div>\n      <div className=\"post__username\">{username}</div>\n      <p className=\"post__text\">{body}</p>\n      <button\n        className=\"post__delete\"\n        type=\"button\"\n        onClick={() => onClick(postId)}\n      >\n        &#9587;\n      </button>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from '../../types/Post';\nimport { PostComponent } from '../PostComponent/PostComponent';\n\nimport './postList.scss';\n\ntype Props = {\n  posts: Post[] | [];\n  onClick: (postID: number) => void;\n};\n\nexport const PostsList: FC<Props> = ({ posts, onClick }) => (\n  <ul className=\"postsList\">\n    {posts.map((post: Post) => (\n      <li key={post.id}>\n        <PostComponent post={post} onClick={onClick} />\n      </li>\n    ))}\n  </ul>\n);\n","import React, { FC, ChangeEvent } from 'react';\n\nimport './username.scss';\n\ntype Props = {\n  username: string;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  onClick: () => void;\n};\n\nexport const Username: FC<Props> = ({ onChange, onClick, username }) => (\n  <label htmlFor=\"username\" className=\"username\">\n    <input\n      type=\"text\"\n      id=\"username\"\n      placeholder=\"Please write your username\"\n      value={username}\n      onChange={(e) => onChange(e)}\n      className=\"username__input\"\n    />\n\n    <button\n      type=\"button\"\n      disabled={!username}\n      onClick={onClick}\n      className=\"username__button\"\n    >\n      Apply\n    </button>\n  </label>\n);\n","export const idGenarate = () => {\n  const split = crypto.randomUUID().split('');\n  const filter = split.join('').replace(/[^\\d]/g, '');\n  const id = +filter;\n\n  return id;\n};\n","import React, {\n  FC, useState, useEffect, ChangeEvent, KeyboardEvent,\n} from 'react';\nimport { getPosts } from '../../api/api';\nimport './posts.scss';\nimport { useLocalStorage } from '../../hooks/useLocaleStorage';\nimport { Loader } from '../Loader';\nimport { PostsList } from '../PostList';\nimport { Post } from '../../types/Post';\nimport { Username } from '../Username';\nimport { idGenarate } from '../../helper/helper';\n\nexport const Posts: FC = () => {\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [text, setText] = useLocalStorage('text', '');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [error, setError] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const [username, setUserName] = useState('');\n  const [appliedUsername, setAppliedUsername] = useLocalStorage('username', '');\n\n  const deletePostHandler = (postID: number) => {\n    setPosts(prevstate => prevstate.filter(el => el.postId !== postID));\n  };\n\n  const textChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  const usernameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserName(e.target.value);\n  };\n\n  const appliedHandler = () => {\n    if (username) {\n      setAppliedUsername(username);\n    }\n  };\n\n  const addPost = () => {\n    if (!text) {\n      setError(true);\n      setErrorMessage('Please write some text to post it!');\n\n      return;\n    }\n\n    const post: Post = {\n      user: {\n        username: appliedUsername,\n        id: idGenarate(),\n      },\n      id: idGenarate(),\n      body: text,\n      postId: idGenarate(),\n    };\n\n    setPosts(prevState => [...prevState, post]);\n    setText('');\n  };\n\n  const onKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      addPost();\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => setError(false), 3000);\n  }, [error]);\n\n  useEffect(() => {\n    setTimeout(() => setErrorMessage(''), 3000);\n  }, [errorMessage]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPosts()\n      .then(res => {\n        setPosts(res.comments);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  if (!appliedUsername) {\n    return (\n      <Username\n        onChange={usernameHandler}\n        onClick={appliedHandler}\n        username={username}\n      />\n    );\n  }\n\n  return (\n    <div className=\"posts\">\n      { isLoading ? (\n        <Loader />\n      ) : (\n        <PostsList posts={posts} onClick={deletePostHandler} />\n      )}\n\n      {error && <p className=\"posts__error\">{errorMessage}</p>}\n\n      <div className=\"posts__addPost\">\n        <textarea\n          className=\"posts__addPost-textarea\"\n          name=\"addPost\"\n          id=\"addPost\"\n          cols={30}\n          rows={10}\n          placeholder=\"Write some post....\"\n          value={text}\n          onChange={textChangeHandler}\n          onKeyDown={(e) => onKeyPress(e)}\n        />\n\n        <button\n          type=\"button\"\n          className=\"posts__addPost-button\"\n          onClick={addPost}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const getPosts = () => fetch('https://dummyjson.com/comments?limit=5').then(res => res.json());\n","import React, { FC } from 'react';\nimport './App.scss';\nimport { Posts } from './components/Posts';\n\nexport const App: FC = () => {\n  return (\n    <div className=\"testTask\">\n      <Posts />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}