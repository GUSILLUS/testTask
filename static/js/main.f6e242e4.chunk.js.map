{"version":3,"sources":["hooks/useLocaleStorage.ts","components/Loader/Loader.tsx","components/PostComponent/PostComponent.tsx","components/PostList/PostsList.tsx","helper/helper.ts","components/ErrorMessage/ErrorMessage.tsx","components/Posts/Posts.tsx","api/api.ts","components/Username/Username.tsx","App.tsx","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","data","localStorage","getItem","JSON","parse","value","setValue","currentValue","setItem","stringify","Loader","className","PostComponent","post","onDelete","user","body","postId","username","firstLetter","split","map","el","slice","join","type","onClick","PostsList","posts","id","idGenerate","crypto","randomUUID","replace","ErrorMessage","message","Posts","userName","setPosts","text","setText","isLoading","setIsLoading","errorMessage","setErrorMessage","addPost","prevState","useEffect","timer","setTimeout","clearTimeout","fetch","then","res","json","comments","catch","finally","postID","prevstate","filter","name","cols","rows","placeholder","onChange","e","target","onKeyDown","preventDefault","disabled","Username","htmlFor","autoComplete","App","setUserName","appliedUsername","setAppliedUsername","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6e242e4.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useLocalStorage = (key: string, initialValue: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const data = localStorage.getItem(key);\n\n      return data ? JSON.parse(data) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (currentValue: string) => {\n    setValue(currentValue);\n    localStorage.setItem(key, JSON.stringify(currentValue));\n  };\n\n  return [value, save];\n};\n","import React, { FC } from 'react';\n\nimport './loader.scss';\n\nexport const Loader: FC = () => (\n  <div className=\"lds-roller\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n);\n","import React, { FC } from 'react';\nimport { Post } from '../../types/Post';\n\nimport './postComponent.scss';\n\ntype Props = {\n  post: Post;\n  onDelete: (postID: number) => void;\n};\n\nexport const PostComponent: FC<Props> = ({ post, onDelete }) => {\n  const { user, body, postId } = post;\n  const { username } = user;\n\n  const firstLetter = username.split(' ').map(el => el.slice(0, 1)).join('');\n\n  const deletePostHandler = () => {\n    onDelete(postId);\n  };\n\n  return (\n    <li className=\"post\">\n      <div className=\"post__username--firs-letter\">{firstLetter}</div>\n      <div className=\"post__username\">{username}</div>\n      <p className=\"post__text\">{body}</p>\n      <button\n        className=\"post__delete\"\n        type=\"button\"\n        onClick={deletePostHandler}\n      >\n        &#10006;\n      </button>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from '../../types/Post';\nimport { PostComponent } from '../PostComponent/PostComponent';\n\nimport './postList.scss';\n\ntype Props = {\n  posts: Post[];\n  onDelete: (postID: number) => void;\n};\n\nexport const PostsList: FC<Props> = ({ posts, onDelete }) => (\n  <ul className=\"postsList\">\n    {posts.map((post: Post) => (\n      <PostComponent post={post} onDelete={onDelete} key={post.id} />\n    ))}\n  </ul>\n);\n","export const idGenerate = () => {\n  const split = crypto.randomUUID().split('');\n  const filter = split.join('').replace(/[^\\d]/g, '');\n\n  return +filter;\n};\n","import React, { FC } from 'react';\n\nimport './errorMessage.scss';\n\ntype Props = {\n  message: string;\n};\n\nexport const ErrorMessage: FC<Props> = ({ message }) => (\n  <div className=\"errorMessage\">\n    <p className=\"errorMessage__text\">{message}</p>\n  </div>\n);\n","import React, {\n  FC, useState, useEffect, ChangeEvent, KeyboardEvent,\n} from 'react';\nimport { getPosts } from '../../api/api';\nimport './posts.scss';\nimport { useLocalStorage } from '../../hooks/useLocaleStorage';\nimport { Loader } from '../Loader';\nimport { PostsList } from '../PostList';\nimport { Post } from '../../types/Post';\nimport { idGenerate } from '../../helper/helper';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  userName: string;\n};\n\nexport const Posts: FC<Props> = ({ userName }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [text, setText] = useLocalStorage('text', '');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const deletePostHandler = (postID: number) => {\n    setPosts(prevstate => prevstate.filter(el => el.postId !== postID));\n  };\n\n  const textChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n\n  const addPost = () => {\n    if (!text) {\n      setErrorMessage('Please write some text to post it!');\n\n      return;\n    }\n\n    const post: Post = {\n      user: {\n        username: userName,\n        id: idGenerate(),\n      },\n      id: idGenerate(),\n      body: text,\n      postId: idGenerate(),\n    };\n\n    setPosts(prevState => [...prevState, post]);\n    setText('');\n  };\n\n  const onKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      addPost();\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setErrorMessage(null);\n    }, 3000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [errorMessage]);\n\n  useEffect(() => {\n    getPosts()\n      .then(res => {\n        setPosts(res.comments);\n      })\n      .catch(res => setErrorMessage(res.message))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"posts\">\n      { isLoading ? (\n        <Loader />\n      ) : (\n        <PostsList posts={posts} onDelete={deletePostHandler} />\n      )}\n\n      {errorMessage && <ErrorMessage message={errorMessage} />}\n\n      <div className=\"posts__addPost\">\n        <textarea\n          className=\"posts__addPost-textarea\"\n          name=\"addPost\"\n          id=\"addPost\"\n          cols={30}\n          rows={10}\n          placeholder=\"Write some post....\"\n          value={text}\n          onChange={textChangeHandler}\n          onKeyDown={onKeyPress}\n        />\n\n        <button\n          type=\"button\"\n          className=\"posts__addPost-button\"\n          onClick={addPost}\n          disabled={errorMessage !== null}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const getPosts = () => fetch('https://dummyjson.com/comments?limit=5').then(res => res.json());\n","import React, { FC, ChangeEvent } from 'react';\n\nimport './username.scss';\n\ntype Props = {\n  username: string;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  onClick: () => void;\n};\n\nexport const Username: FC<Props> = ({ onChange, onClick, username }) => (\n  <label htmlFor=\"username\" className=\"username\">\n    <input\n      type=\"text\"\n      id=\"username\"\n      placeholder=\"Please write your username\"\n      value={username}\n      onChange={onChange}\n      className=\"username__input\"\n      autoComplete=\"off\"\n    />\n\n    <button\n      type=\"button\"\n      disabled={!username}\n      onClick={onClick}\n      className=\"username__button\"\n    >\n      Apply\n    </button>\n  </label>\n);\n","import React, { FC, useState, ChangeEvent } from 'react';\nimport './App.scss';\nimport { Posts } from './components/Posts';\nimport { useLocalStorage } from './hooks/useLocaleStorage';\nimport { Username } from './components/Username';\n\nexport const App: FC = () => {\n  const [username, setUserName] = useState('');\n  const [appliedUsername, setAppliedUsername] = useLocalStorage('username', '');\n\n  const usernameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserName(e.target.value);\n  };\n\n  const appliedHandler = () => {\n    if (username) {\n      setAppliedUsername(username);\n    }\n  };\n\n  return (\n    <div className=\"testTask\">\n      {appliedUsername ? (\n        <Posts userName={appliedUsername} />\n      ) : (\n        <Username\n          onChange={usernameHandler}\n          onClick={appliedHandler}\n          username={username}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}